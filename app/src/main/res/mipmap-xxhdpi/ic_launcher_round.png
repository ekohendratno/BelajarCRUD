package id.mycompany.sistempelaporan;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.pdf.PdfDocument;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

import cn.pedant.SweetAlert.SweetAlertDialog;
import id.mycompany.sistempelaporan.fun.DataHelper;
import id.mycompany.sistempelaporan.fun.FileUtility;
import id.mycompany.sistempelaporan.model.Pelaporan;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class ReportActivity extends AppCompatActivity {


    DataHelper db;
    File filePdf;
    RecyclerView recyclerView;
    RecyclerViewAdapter adapter;
    List<Pelaporan> imagesEncodedList = new ArrayList<>();
    int PICK_IMAGE_MULTIPLE = 111;
    SweetAlertDialog sweetAlertDialog;

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_report);

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        if (getSupportActionBar() != null){
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowHomeEnabled(true);
        }

        db = new DataHelper(ReportActivity.this);


        findViewById(R.id.actBrowse).setOnClickListener(v->{
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
                imagesEncodedList.clear();
                browseClick();
            }
        });

        findViewById(R.id.actSendPDF).setOnClickListener(v->{
            /**
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                createPDFWithMultipleImage();
            }*/

            AsyncTaskRunner runner = new AsyncTaskRunner();
            runner.execute();

            /**

            sweetAlertDialog = new SweetAlertDialog(ReportActivity.this, SweetAlertDialog.SUCCESS_TYPE)
                    .setTitleText("Good job!")
                    .setContentText("File berhasil dikirim!");
            sweetAlertDialog.setCancelable(false);
            sweetAlertDialog.setConfirmClickListener(sweetAlertDialog -> {
                sweetAlertDialog.dismiss();
            });
            sweetAlertDialog.show();*/
        });

        recyclerView = findViewById(R.id.recycle_view);
        recyclerView.setNestedScrollingEnabled(false);
        LinearLayoutManager layoutManager = new LinearLayoutManager(ReportActivity.this);
        recyclerView.setLayoutManager(layoutManager);

        adapter = new RecyclerViewAdapter(ReportActivity.this, imagesEncodedList);
        recyclerView.setItemAnimator(new DefaultItemAnimator());
        recyclerView.setAdapter(adapter);

    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // handle arrow click here
        if (item.getItemId() == android.R.id.home) {
            finish(); // close this activity and return to preview activity (if there is any)
        }

        return super.onOptionsItemSelected(item);
    }

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
    public void browseClick() {

        Intent intent = new Intent();
        intent.setType("image/*");
        intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(intent,"Select Picture"), PICK_IMAGE_MULTIPLE);
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(requestCode == PICK_IMAGE_MULTIPLE) {
            if(resultCode == Activity.RESULT_OK) {
                if(data.getClipData() != null) {
                    int count = data.getClipData().getItemCount(); //evaluate the count before the for loop --- otherwise, the count is evaluated every loop.
                    for(int i = 0; i < count; i++) {
                        Uri imageUri = data.getClipData().getItemAt(i).getUri();

                        Log.e("img", FileUtility.getPath(ReportActivity.this,imageUri));
                        imagesEncodedList.add( new Pelaporan(FileUtility.getPath(ReportActivity.this,imageUri)) );
                    }

                    //do something with the image (save it to some directory or whatever you need to do with it here)
                }

                createPDF();
            }


            adapter.notifyDataSetChanged();
        }
    }


/**
    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    private void createPDFWithMultipleImage(){
        Log.e("s",String.valueOf(imagesEncodedList.size()));
        File file = getOutputFile();
        if (file != null){
            try {

                Log.e("try","aa");
                FileOutputStream fileOutputStream = new FileOutputStream(file);
                PdfDocument pdfDocument = new PdfDocument();

                for (int i = 0; i < imagesEncodedList.size(); i++){
                    Pelaporan pelaporan = imagesEncodedList.get(i);
                    Bitmap bitmap = BitmapFactory.decodeFile(pelaporan.pelaporan_file);
                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(bitmap.getWidth(), bitmap.getHeight(), (i + 1)).create();
                    PdfDocument.Page page = pdfDocument.startPage(pageInfo);
                    Canvas canvas = page.getCanvas();
                    Paint paint = new Paint();
                    paint.setColor(Color.BLUE);
                    canvas.drawPaint(paint);
                    canvas.drawBitmap(bitmap, 0f, 0f, null);
                    pdfDocument.finishPage(page);
                    bitmap.recycle();
                }
                pdfDocument.writeTo(fileOutputStream);
                pdfDocument.close();

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }*/

    private File getOutputFile(){
        File root = new File(this.getExternalFilesDir(null),"sistempelaporan");

        boolean isFolderCreated = true;

        if (!root.exists()){
            isFolderCreated = root.mkdir();
        }

        if (isFolderCreated) {
            String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(new Date());
            String imageFileName = "PDF_" + timeStamp;

            return new File(root, imageFileName + ".pdf");
        }
        else {
            Toast.makeText(this, "Folder is not created", Toast.LENGTH_SHORT).show();
            return null;
        }
    }

    ProgressDialog dialog;
    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    private void createPDF() {

        File root = new File(this.getExternalFilesDir(null),"sistempelaporan");

        if (!root.exists()) root.mkdir();

        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(new Date());
        String imageFileName = "PDF_" + timeStamp + ".pdf";

        final File file = new File(root, imageFileName);

        dialog = ProgressDialog.show(this, "", "Generating PDF...");
        dialog.show();
        new Thread(() -> {
            Bitmap bitmap;
            PdfDocument document = new PdfDocument();
            //  int height = 842;
            //int width = 595;
            int height = 1010;
            int width = 714;
            int reqH, reqW;
            reqW = width;

            for (int i = 0; i < imagesEncodedList.size(); i++) {
                Pelaporan pelaporan = imagesEncodedList.get(i);
                Bitmap bitmapori = BitmapFactory.decodeFile(pelaporan.pelaporan_file);

                bitmap = Bitmap.createScaledBitmap(bitmapori, 120, 120, false);


                reqH = width * bitmap.getHeight() / bitmap.getWidth();
                Log.e("reqH", "=" + reqH);
                if (reqH < height) {
                    //  bitmap = Bitmap.createScaledBitmap(bitmap, reqW, reqH, true);
                } else {
                    reqH = height;
                    reqW = height * bitmap.getWidth() / bitmap.getHeight();
                    Log.e("reqW", "=" + reqW);
                    //   bitmap = Bitmap.createScaledBitmap(bitmap, reqW, reqH, true);
                }
                // Compress image by decreasing quality
                // ByteArrayOutputStream out = new ByteArrayOutputStream();
                //  bitmap.compress(Bitmap.CompressFormat.WEBP, 50, out);
                //    bitmap = BitmapFactory.decodeStream(new ByteArrayInputStream(out.toByteArray()));
                //bitmap = bitmap.copy(Bitmap.Config.RGB_565, false);
                //Create an A4 sized page 595 x 842 in Postscript points.
                //PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(595, 842, 1).create();
                PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(reqW, reqH, 1).create();
                PdfDocument.Page page = document.startPage(pageInfo);
                Canvas canvas = page.getCanvas();

                Log.e("PDF", "pdf = " + bitmap.getWidth() + "x" + bitmap.getHeight());
                canvas.drawBitmap(bitmap, 0, 0, null);

                document.finishPage(page);
            }

            FileOutputStream fos;
            try {
                fos = new FileOutputStream(file);
                document.writeTo(fos);
                document.close();
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

            runOnUiThread(() -> {
                dialog.dismiss();
                filePdf = filePdf;
                Toast.makeText(ReportActivity.this,"PDF berhasil dibuat, siap dikirim",Toast.LENGTH_SHORT).show();

            });
        }).start();
    }

    private class RecyclerViewAdapter extends RecyclerView.Adapter<RecyclerViewAdapter.ItemPelaporanViewHolder> {

        Context context;
        List<Pelaporan> pelaporanList;

        public RecyclerViewAdapter(Context context